<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Horizon Bank | Secure Online Banking</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary: #0052a5;
      --secondary: #ffc72c;
      --danger: #e53935;
      --success: #4caf50;
      --gray-light: #ddd;
      --light: #f5f5f5;
      --shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      --radius: 8px;
    }
    * { box-sizing: border-box; margin: 0; padding: 0; font-family: Arial, sans-serif; }
    body { background: var(--light); }
    .navbar { background: var(--primary); color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; }
    .navbar button { background: var(--secondary); border: none; padding: 8px 15px; border-radius: var(--radius); cursor: pointer; }
    .login-container {
      display: flex; justify-content: center; align-items: center;
      height: 100vh;
      background: linear-gradient(135deg, #0052a5, #007bff);
    }
    .login-card {
      background: white; padding: 30px; width: 350px;
      border-radius: 12px; box-shadow: 0 8px 20px rgba(0,0,0,0.15); margin: 10px;
      transition: transform 0.3s ease;
    }
    .login-card:hover { transform: translateY(-3px); }
    label { display: block; margin-top: 10px; }
    input, textarea { width: 100%; padding: 10px; margin-top: 5px; border: 1px solid var(--gray-light); border-radius: var(--radius); }
    .btn-login {
      background: linear-gradient(90deg, #0052a5, #007bff);
      color: white; font-weight: bold; width: 100%; padding: 12px;
      border: none; border-radius: 25px; cursor: pointer; margin-top: 15px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    .btn-login:hover { opacity: 0.9; }
    .btn-switch-form { background: none; border: none; color: var(--primary); cursor: pointer; text-decoration: underline; }
    .hidden { display: none; }
    .dashboard { max-width: 900px; margin: 30px auto; background: transparent; padding: 0; }
    .transfer-form input { margin-right: 10px; }
    table { width: 100%; border-collapse: collapse; margin-top: 20px; background: white; border-radius: 8px; box-shadow: var(--shadow); overflow: hidden; }
    th, td { border: 1px solid var(--gray-light); padding: 10px; text-align: center; }
    .block-btn { background: orange; color: white; }
    .delete-btn { background: red; color: white; }
    .summary-card { background: white; padding: 15px; border-radius: 8px; flex: 1; min-width: 150px; box-shadow: var(--shadow); }
  </style>
</head>
<body>
  <div class="navbar hidden" id="navbar">
    <h1>🏦 Horizon Bank</h1>
    <button onclick="logout()">Logout</button>
  </div>

  <div class="login-container" id="loginPage">
    <div class="login-card" id="loginFormContainer">
      <h2>Customer Login</h2>
      <form id="loginForm">
        <label>Username</label><input type="text" id="username">
        <label>Password</label><input type="password" id="password">
        <button type="submit" class="btn-login">Sign In</button>
        <p>New user? <button type="button" class="btn-switch-form" onclick="showRegisterForm()">Register</button></p>
        <p>Are you Admin? <button type="button" class="btn-switch-form" onclick="showAdminLogin()">Admin Login</button></p>
      </form>
    </div>

    <div class="login-card hidden" id="registerFormContainer">
      <h2>Create New Account</h2>
      <form id="registerForm">
        <label>Full Name</label><input type="text" id="fullname">
        <label>Email</label><input type="email" id="email">
        <label>Mobile</label><input type="tel" id="mobile">
        <label>Username</label><input type="text" id="regUsername">
        <label>Password</label><input type="password" id="regPassword">
        <label>Address</label><textarea id="address"></textarea>
        <button type="submit" class="btn-login">Register</button>
        <p>Already registered? <button type="button" class="btn-switch-form" onclick="showLoginForm()">Login</button></p>
      </form>
    </div>

    <div class="login-card hidden" id="adminLoginContainer">
      <h2>Admin Login</h2>
      <form id="adminLoginForm">
        <label>Admin Username</label><input type="text" id="adminUsername">
        <label>Password</label><input type="password" id="adminPassword">
        <button type="submit" class="btn-login">Admin Sign In</button>
        <p>Back to Customer Login <button type="button" class="btn-switch-form" onclick="showLoginForm()">Go Back</button></p>
      </form>
    </div>
  </div>

  <div class="dashboard hidden" id="userDashboard">
    <h2 id="welcomeMsg"></h2>
    <p>Account Number: <strong id="userAccNo"></strong></p>
    <h3>Balance: <span id="userBalance">$10000</span></h3>

    <div style="display: flex; gap: 20px; margin-top: 20px; flex-wrap: wrap;">
      <div style="flex:1; background:#e3f2fd; padding:15px; border-radius:8px; box-shadow:var(--shadow);">
        <h3>Balance Overview</h3>
        <canvas id="userPieChart"></canvas>
      </div>
      <div style="flex:1; background:#fff3e0; padding:15px; border-radius:8px; box-shadow:var(--shadow);">
        <h3>Recent Transactions</h3>
        <ul id="recentTx" style="list-style:none; padding:0; max-height:200px; overflow:auto;"></ul>
      </div>
    </div>

    <div class="transfer-form">
      <h3>Transfer Funds</h3>
      <input type="number" id="transferToAcc" placeholder="Recipient Account Number">
      <input type="number" id="transferAmount" placeholder="Amount">
      <button class="btn-login" onclick="transferFunds()">Send Money</button>
      <p id="transferMsg"></p>
    </div>

    <h3>Transaction History</h3>
    <table>
      <thead><tr><th>Date</th><th>From</th><th>To</th><th>Amount</th></tr></thead>
      <tbody id="userTxBody"></tbody>
    </table>
  </div>

  <div class="dashboard hidden" id="adminDashboard">
    <h2>Admin Dashboard</h2>
    <div style="display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap;">
      <div class="summary-card"><h3>Total Users</h3><p id="totalUsers">0</p></div>
      <div class="summary-card"><h3>Total Available Amount</h3><p id="totalAmount">$0</p></div>
      <div class="summary-card"><h3>Total Transferred</h3><p id="transferredAmount">$0</p></div>
    </div>
    <table>
      <thead>
        <tr><th>Name</th><th>Email</th><th>Mobile</th><th>Username</th><th>Account No</th><th>Address</th><th>Amount ($)</th><th>Status</th><th>Actions</th></tr>
      </thead>
      <tbody id="userTableBody"></tbody>
    </table>
    <canvas id="userChart" style="margin-top:20px; width:100%; max-height:300px;"></canvas>
  </div>

  <script>
    let users = [];
    let transactions = [];
    let totalTransferred = 0;
    let currentUser = null;
    let userChart, userPieChart;

    document.getElementById('registerForm').addEventListener('submit', function(e){
      e.preventDefault();
      const newUser = {
        name: fullname.value, email: email.value, mobile: mobile.value,
        username: regUsername.value, password: regPassword.value,
        address: address.value, status: 'Active', balance: 10000,
        accountNumber: Math.floor(100000000000 + Math.random() * 900000000000)
      };
      users.push(newUser);
      alert("Registration successful! Account: " + newUser.accountNumber);
      showLoginForm();
    });

    document.getElementById('loginForm').addEventListener('submit', function(e){
      e.preventDefault();
      const user = users.find(u => u.username === username.value && u.password === password.value);
      if(user){
        if(user.status === 'Blocked'){ alert("🚫 Your account is blocked."); return; }
        currentUser = user;
        welcomeMsg.innerText = `Welcome, ${user.name}`;
        userAccNo.innerText = user.accountNumber;
        userBalance.innerText = `$${user.balance}`;
        showUserDashboard();
        updateUserTransactions();
      } else { alert("Invalid credentials"); }
    });

    document.getElementById('adminLoginForm').addEventListener('submit', function(e){
      e.preventDefault();
      if(adminUsername.value === "admin" && adminPassword.value === "admin123"){ showAdminDashboard(); }
      else { alert("Invalid Admin Credentials"); }
    });

    function transferFunds(){
      if(currentUser.status === 'Blocked'){ transferMsg.innerText = "🚫 Blocked."; return; }
      const toAcc = transferToAcc.value, amount = parseFloat(transferAmount.value);
      if(toAcc && /^\d{12}$/.test(toAcc) && amount > 0){
        currentUser.balance -= amount; totalTransferred += amount;
        const receiver = users.find(u => u.accountNumber == toAcc);
        if(receiver){ receiver.balance += amount; }
        transactions.push({ from: currentUser.accountNumber, to: toAcc, amount, date: new Date().toLocaleString() });
        userBalance.innerText = `$${currentUser.balance}`;
        transferMsg.innerText = `✅ $${amount} transferred to Account ${toAcc}`;
        updateUserTransactions();
      } else { transferMsg.innerText = "⚠️ Enter valid 12-digit account and amount!"; }
    }

    function updateUserTransactions(){
      const myTx = transactions.filter(tx => tx.from === currentUser.accountNumber || tx.to === currentUser.accountNumber);
      userTxBody.innerHTML = myTx.map(tx => `
        <tr><td>${tx.date}</td><td>${tx.from}</td><td>${tx.to}</td>
        <td>${tx.from === currentUser.accountNumber ? '- $'+tx.amount : '+ $'+tx.amount}</td></tr>
      `).join('');
      updateUserMiniDashboard();
    }

    function updateUserMiniDashboard(){
      const ctx = document.getElementById('userPieChart').getContext('2d');
      if(userPieChart) userPieChart.destroy();
      userPieChart = new Chart(ctx, {
        type: 'pie',
        data: { labels: ['Available Balance', 'Transferred'],
          datasets: [{ data: [currentUser.balance, totalTransferred], backgroundColor: ['#4CAF50', '#2196F3'] }] },
        options: { responsive: true }
      });
      const myTx = transactions.filter(tx => tx.from === currentUser.accountNumber || tx.to === currentUser.accountNumber).slice(-5).reverse();
      document.getElementById('recentTx').innerHTML = myTx.map(tx => `
        <li style="padding:5px 0; border-bottom:1px solid #ddd;">
          ${tx.date} → ${tx.from === currentUser.accountNumber ? 'Sent' : 'Received'} $${tx.amount}
        </li>`).join('');
    }

    function showRegisterForm(){ toggleForms('register'); }
    function showLoginForm(){ toggleForms('login'); }
    function showAdminLogin(){ toggleForms('admin'); }
    function toggleForms(form){
      loginFormContainer.classList.toggle('hidden', form !== 'login');
      registerFormContainer.classList.toggle('hidden', form !== 'register');
      adminLoginContainer.classList.toggle('hidden', form !== 'admin');
    }

    function showUserDashboard(){
      navbar.classList.remove('hidden'); loginPage.classList.add('hidden');
      userDashboard.classList.remove('hidden'); adminDashboard.classList.add('hidden');
    }

    function showAdminDashboard(){
      navbar.classList.remove('hidden'); loginPage.classList.add('hidden');
      userDashboard.classList.add('hidden'); adminDashboard.classList.remove('hidden');
      const total = users.length, totalAmountVal = users.reduce((s,u)=>s+u.balance,0);
      totalUsers.innerText = total; totalAmount.innerText = `$${totalAmountVal}`; transferredAmount.innerText = `$${totalTransferred}`;
      userTableBody.innerHTML = users.map((u, i) => `
        <tr><td>${u.name}</td><td>${u.email}</td><td>${u.mobile}</td><td>${u.username}</td>
        <td>${u.accountNumber}</td><td>${u.address}</td><td>${u.balance}</td><td>${u.status}</td>
        <td>
          <button class="block-btn" onclick="toggleStatus(${i})">${u.status === 'Active' ? 'Block' : 'Unblock'}</button>
          <button class="delete-btn" onclick="deleteUser(${i})">Delete</button>
        </td></tr>`).join('');
      updateUserChart(totalAmountVal, totalTransferred);
    }

    function toggleStatus(i){ users[i].status = users[i].status === 'Active' ? 'Blocked' : 'Active'; showAdminDashboard(); }
    function deleteUser(i){ if(confirm("Delete this user?")){ users.splice(i, 1); showAdminDashboard(); } }
    function logout(){
      navbar.classList.add('hidden'); loginPage.classList.remove('hidden');
      userDashboard.classList.add('hidden'); adminDashboard.classList.add('hidden');
      username.value = password.value = adminUsername.value = adminPassword.value = '';
    }

    function updateUserChart(totalAmount, transferred){
      const ctx = document.getElementById('userChart').getContext('2d');
      if(userChart) userChart.destroy();
      userChart = new Chart(ctx, {
        type: 'pie',
        data: { labels: ['Available Amount', 'Transferred Amount'],
          datasets: [{ data: [totalAmount, transferred], backgroundColor: ['#4CAF50', '#2196F3'] }] },
        options: { responsive: true }
      });
    }
  </script>
</body>
</html>
